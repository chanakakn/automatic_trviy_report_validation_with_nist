#!/usr/bin/env python3
import os
import json
import re
import requests
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font
import logging
from tqdm import tqdm
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from tkinter import scrolledtext
from tkinter import messagebox


class VulnerabilityExporterGUI:
    def __init__(self):
        self.json_file_path = ""
        self.excel_file_name = ""

        self.root = tk.Tk()
        self.root.title("Vulnerability Exporter")
        self.root.geometry("600x400")
        self.root.state('zoomed')  # Maximize the window

        self.style = ttk.Style()
        self.style.configure("TButton", padding=10)
        self.style.configure("TLabel", padding=5)

        self.frame = tk.Frame(self.root)
        self.frame.pack(fill=tk.BOTH, expand=True)

        self.label = ttk.Label(self.frame, text="Select JSON File:")
        self.label.pack()

        self.json_button = ttk.Button(self.frame, text="Browse", command=self.browse_json_file)
        self.json_button.pack()

        self.export_button = ttk.Button(self.frame, text="Export", command=self.export_vulnerabilities)
        self.export_button.pack()

        self.console_label = ttk.Label(self.frame, text="Console Output:")
        self.console_label.pack()

        self.console_text = scrolledtext.ScrolledText(self.frame, height=1, width=80)
        self.console_text.pack(fill=tk.BOTH, expand=True)

        self.json_label = ttk.Label(self.frame, text="Final JSON Data:")
        self.json_label.pack()

        self.json_text = scrolledtext.ScrolledText(self.frame, height=32, width=80)
        self.json_text.pack(fill=tk.BOTH, expand=True)

    def browse_json_file(self):
        self.json_file_path = filedialog.askopenfilename(filetypes=[("JSON Files", "*.json")])

    def export_vulnerabilities(self):
        if self.json_file_path:
            self.excel_file_name = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")])
            if not self.excel_file_name:  # User canceled save operation
                return
            exporter = VulnerabilityExporter(self.json_file_path, self.excel_file_name, self.update_progress, self.log_output, self.show_notification, self.display_json_data)
            exporter.export_vulnerabilities_to_excel_with_progress()

    def update_progress(self, progress):
        self.progress_bar['value'] = progress
        self.root.update_idletasks()

    def log_output(self, message, level=logging.INFO):
        self.console_text.insert(tk.END, message + "\n")
        self.console_text.see(tk.END)
        if level == logging.INFO:
            self.json_text.insert(tk.END, message + "\n")
            self.json_text.see(tk.END)

    def show_notification(self):
        messagebox.showinfo("Export Completed", "Vulnerability export completed successfully!")

    def display_json_data(self, json_data):
        self.json_text.delete(1.0, tk.END)
        self.json_text.insert(tk.END, json_data)
        self.json_text.see(tk.END)

    def run(self):
        self.progress_bar = ttk.Progressbar(self.frame, length=1500, mode='determinate')
        self.progress_bar.pack()

        self.root.mainloop()


class VulnerabilityExporter:
    def __init__(self, json_file_path, excel_file_name, progress_callback, log_callback, notification_callback, json_display_callback):
        self.json_file_path = json_file_path
        self.excel_file_name = excel_file_name
        self.progress_callback = progress_callback
        self.log_callback = log_callback
        self.notification_callback = notification_callback
        self.json_display_callback = json_display_callback

    def export_vulnerabilities_to_excel_with_progress(self):
        try:
            # Configure logging
            logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')

            # Redirect logs to console text box
            logging.getLogger().addHandler(ConsoleTextHandler(self.log_callback))

            # Create an Excel workbook
            workbook = Workbook()
            worksheet = workbook.active

            # Write column headers
            column_headers = [
                "Vulnerability ID", "Package ID", "Package Name", "Installed Version", "Fixed Version",
                "Severity", "Description and Affected Products", "Primary URL", "Confirmed"
            ]
            bold_font = Font(bold=True)
            worksheet.append(column_headers)

            # Format the column headers in bold
            for cell in worksheet[1]:
                cell.font = bold_font

            # Read JSON data from file
            with open(self.json_file_path, 'r') as file:
                # Remove invalid control characters from JSON data
                json_data = re.sub(r'[\x00-\x1F\x7F-\x9F]', '', file.read())

                # Load JSON data
                data = json.loads(json_data)

                # Extract vulnerability information
                results = data.get('Results', [])
                if results:
                    vulnerabilities = results[0].get('Vulnerabilities', [])
                    num_vulnerabilities = len(vulnerabilities)

                    # Export vulnerabilities with progress bar
                    with tqdm(total=num_vulnerabilities, desc="Exporting vulnerabilities", unit="vulnerability", ncols=80) as pbar:
                        for i, vulnerability in enumerate(vulnerabilities):
                            # Process vulnerability data...

                            progress = int((i + 1) / num_vulnerabilities * 100)
                            self.progress_callback(progress)
                            pbar.update()

                            vulnerability_id = vulnerability.get('VulnerabilityID', '')
                            pkg_id = vulnerability.get('PkgID', '')
                            pkg_name = vulnerability.get('PkgName', '')
                            installed_version = vulnerability.get('InstalledVersion', '')
                            fixed_version = vulnerability.get('FixedVersion', '')
                            severity = vulnerability.get('Severity', '')
                            description = vulnerability.get('Description', '')
                            primary_url = vulnerability.get('PrimaryURL', '')
                            issue_summary = ''

                            # Extract issue summary from description
                            description_parts = description.split('\n\n')
                            for part in description_parts:
                                if part.startswith('Issue summary'):
                                    issue_summary = part.split(':', 1)[-1].strip()
                                    break

                            # Fetch CVSS information from NIST NVD API
                            cvss_base_score, is_confirmed = CVSSInfoFetcher.fetch_cvss_info(vulnerability_id)

                            # Write vulnerability information to the worksheet
                            worksheet.append([
                                vulnerability_id, pkg_id, pkg_name, installed_version, fixed_version, severity,
                                description, primary_url, is_confirmed
                            ])

            # Set alignment and wrap text for all cells
            workbook = self.format_worksheet(workbook)

            # Save the workbook only if the excel_file_name is not empty
            if self.excel_file_name:
                workbook.save(self.excel_file_name)

            # Convert JSON data to formatted string
            json_str = json.dumps(data, indent=4)

            # Display JSON data in text box
            self.json_display_callback(json_str)

            self.notification_callback()
            logging.info("Export completed.")
        except FileNotFoundError as e:
            logging.error(f"File not found: {e}")
        except Exception as e:
            logging.error(f"An error occurred during export: {e}")

    def format_worksheet(self, workbook):
        worksheet = workbook.active
        align_center = Alignment(horizontal='center', vertical='center', wrap_text=True)

        for row in worksheet.iter_rows():
            for cell in row:
                cell.alignment = align_center

        return workbook


class CVSSInfoFetcher:
    @staticmethod
    def fetch_cvss_info(vulnerability_id):
        cvss_base_score = ''
        is_confirmed = False

        # Fetch CVSS information from NIST NVD API
        try:
            response = requests.get(f"https://services.nvd.nist.gov/rest/json/cve/1.0/{vulnerability_id}")
            if response.status_code == 200:
                data = response.json()
                result = data.get('result', {})
                if result:
                    cvss = result.get('cvss', {})
                    if cvss:
                        cvss_base_score = cvss.get('baseScore', '')
                        is_confirmed = True
        except requests.exceptions.RequestException as e:
            logging.error(f"An error occurred while fetching CVSS information: {e}")

        return cvss_base_score, is_confirmed


class ConsoleTextHandler(logging.StreamHandler):
    def __init__(self, log_callback):
        super().__init__()
        self.log_callback = log_callback

    def emit(self, record):
        log_entry = self.format(record)
        self.log_callback(log_entry)


if __name__ == "__main__":
    exporter_gui = VulnerabilityExporterGUI()
    exporter_gui.run()
