import os
import json
import re
import sys
import requests
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font
import logging
from tqdm import tqdm


class VulnerabilityExporter:
    def __init__(self, json_file_path, excel_file_name):
        self.json_file_path = json_file_path
        self.excel_file_name = excel_file_name

    def export_vulnerabilities_to_excel_with_progress(self):
        try:
            # Configure logging
            logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')

            # Create an Excel workbook
            workbook = Workbook()
            worksheet = workbook.active

            # Write column headers
            column_headers = [
                "Vulnerability ID", "Package ID", "Package Name", "Installed Version", "Fixed Version",
                "Severity", "Description and Affected Products", "Primary URL", "Confirmed"
            ]
            bold_font = Font(bold=True)
            worksheet.append(column_headers)

            # Format the column headers in bold
            for cell in worksheet[1]:
                cell.font = bold_font

            # Read JSON data from file
            with open(self.json_file_path, 'r') as file:
                # Remove invalid control characters from JSON data
                json_data = re.sub(r'[\x00-\x1F\x7F-\x9F]', '', file.read())

                # Load JSON data
                data = json.loads(json_data)

                # Extract vulnerability information
                results = data.get('Results', [])
                if results:
                    vulnerabilities = results[0].get('Vulnerabilities', [])
                    num_vulnerabilities = len(vulnerabilities)

                    # Export vulnerabilities with progress bar
                    with tqdm(total=num_vulnerabilities, desc="Exporting vulnerabilities", unit="vulnerability", ncols=80) as pbar:
                        for i, vulnerability in enumerate(vulnerabilities):
                            # Process vulnerability data...

                            progress = int((i + 1) / num_vulnerabilities * 100)
                            pbar.update()

                            vulnerability_id = vulnerability.get('VulnerabilityID', '')
                            pkg_id = vulnerability.get('PkgID', '')
                            pkg_name = vulnerability.get('PkgName', '')
                            installed_version = vulnerability.get('InstalledVersion', '')
                            fixed_version = vulnerability.get('FixedVersion', '')
                            severity = vulnerability.get('Severity', '')
                            description = vulnerability.get('Description', '')
                            primary_url = vulnerability.get('PrimaryURL', '')
                            issue_summary = ''

                            # Extract issue summary from description
                            description_parts = description.split('\n\n')
                            for part in description_parts:
                                if part.startswith('Issue summary'):
                                    issue_summary = part.split(':', 1)[-1].strip()
                                    break

                            # Fetch CVSS information from NIST NVD API
                            cvss_base_score, is_confirmed = CVSSInfoFetcher.fetch_cvss_info(vulnerability_id)

                            # Write vulnerability information to the worksheet
                            worksheet.append([
                                vulnerability_id, pkg_id, pkg_name, installed_version, fixed_version, severity,
                                description, primary_url, is_confirmed
                            ])

            # Set alignment and wrap text for all cells
            workbook = self.format_worksheet(workbook)

            # Save the workbook only if the excel_file_name is not empty
            if self.excel_file_name:
                workbook.save(self.excel_file_name)

            # Convert JSON data to formatted string
            json_str = json.dumps(data, indent=4)

            # Display JSON data
            print("Final JSON Data:")
            print(json_str)

            logging.info("Export completed.")
        except FileNotFoundError as e:
            logging.error(f"File not found: {e}")
        except Exception as e:
            logging.error(f"An error occurred during export: {e}")

    def format_worksheet(self, workbook):
        worksheet = workbook.active
        align_center = Alignment(horizontal='center', vertical='center', wrap_text=True)

        for row in worksheet.iter_rows():
            for cell in row:
                cell.alignment = align_center

        return workbook


class CVSSInfoFetcher:
    @staticmethod
    def fetch_cvss_info(vulnerability_id):
        cvss_base_score = ''
        is_confirmed = False

        # Fetch CVSS information from NIST NVD API
        try:
            response = requests.get(f"https://services.nvd.nist.gov/rest/json/cve/1.0/{vulnerability_id}")
            if response.status_code == 200:
                data = response.json()
                result = data.get('result', {})
                if result:
                    cvss = result.get('cvss', {})
                    if cvss:
                        cvss_base_score = cvss.get('baseScore', '')
                        is_confirmed = True
        except requests.exceptions.RequestException as e:
            logging.error(f"An error occurred while fetching CVSS information: {e}")

        return cvss_base_score, is_confirmed


def main():
    '''
    Sample run:
    python vulnerability_exporter.py trivy_report.json vulnerabilities.xlsx
    '''
    if len(sys.argv) < 3:
        print("Usage: python vulnerability_exporter.py <json_file_path> <excel_file_name>")
        return

    json_file_path = sys.argv[1]
    excel_file_name = sys.argv[2]   
    
    # Configure logging
    logging.basicConfig(filename='vulnerability.log', level=logging.ERROR,
                        format='%(asctime)s %(levelname)s: %(message)s')    

    exporter = VulnerabilityExporter(json_file_path, excel_file_name)
    exporter.export_vulnerabilities_to_excel_with_progress()    


if __name__ == "__main__":
    main()
    
